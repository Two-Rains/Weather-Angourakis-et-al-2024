# Calibration targeting weather examples

Load source file containing the R implementation of the Weather model:

```{r}
source("source/weatherModel.R")
```

As a final part in this demonstration, we will extend the above process to deal with multiple instances of curves and parameter sets, generated by the same configuration of hyperparameters. We will then want to estimate those original hyperparameter values.

We use the data downloaded at NASA´s POWER access viewer (power.larc.nasa.gov/data-access-viewer/) selecting the user community 'Agroclimatology' and pin pointing the different locations between 01/01/1984 and 31/12/2007. The exact locations are:

-   Rakhigarhi, Haryana, India (Latitude: 29.1687, Longitude: 76.0687)\
-   Irkutsk, Irkutsk Óblast, Russia (Latitude: 52.2891, Longitude: 104.2493)
-   Hobart, Tasmania, Australia (Latitude: -42.8649, Longitude: 147.3441)
-   Pearl Harbor, Hawaii, United States of America (Latitude: 21.376, Longitude: -157.9708)
-   São Paulo, Brazil (Latitude: -23.5513, Longitude: -46.6344)
-   Cambridge, United Kingdom (Latitude: 52.2027, Longitude: 0.122)
-   Windhoek, Namibia (Latitude: -22.5718, Longitude: 17.0953)

We selected the ICASA Format's parameters:

-   Precipitation (PRECTOT)\
-   Wind speed at 2m (WS2M)\
-   Relative Humidity at 2m (RH2M)\
-   Dew/frost point at 2m (T2MDEW)\
-   Maximum temperature at 2m (T2M_MAX)\
-   Minimum temperature at 2m (T2M_MIN)\
-   All sky insolation incident on a horizontal surface (ALLSKY_SFC_SW_DWN)\
-   Temperature at 2m (T2M)

and from Solar Related Parameters:

-   Top-of-atmosphere Insolation (ALLSKY_TOA_SW_DWN)

```{r}
inputFiles <- paste0("input/", list.files(path = "input"))

weather <- data.frame()

for (i in 1:length(inputFiles))
{
  tempData <- read.csv(inputFiles[i], skip = 18)
  tempData <- tempData[tempData$YEAR %in% 1984:2007,]
  
  weather <- rbind(weather, tempData)
}

rm(tempData)

# use Latitude to distinguish sites and create a new variable using site names:
weather$Site <- rep(NA, nrow(weather))
for (i in 1:nrow(weather))
{
  if (floor(weather$LAT[i]) == 29) { weather$Site[i] <- "Rakhigarhi" }
  if (floor(weather$LON[i]) == 104) { weather$Site[i] <- "Irkutsk" }
  if (floor(weather$LAT[i]) == -43) { weather$Site[i] <- "Hobart" }
  if (floor(weather$LAT[i]) == 21) { weather$Site[i] <- "Pearl Harbor" }
  if (floor(weather$LAT[i]) == -24) { weather$Site[i] <- "Sao Paulo" }
  if (floor(weather$LON[i]) == 0) { weather$Site[i] <- "Cambridge" }
  if (floor(weather$LAT[i]) == -23) { weather$Site[i] <- "Windhoek" }
}
```

```{r}
originalHyperparams <- list(
  yearlyMean = 400,
  yearlySd = 130,
  nSamples_yearlyMean = 200,
  nSamples_yearlySd = 5,
  maxSampleSize_yearlyMean = 10,
  maxSampleSize_yearlySd = 3,
  plateauValue_yearlyMean = 0.1,
  plateauValue_yearlySd = 0.05,
  inflection1_yearlyMean = 40,
  inflection1_yearlySd = 20,
  rate1_yearlyMean = 0.15,
  rate1_yearlySd = 0.02,
  inflection2_yearlyMean = 200, 
  inflection2_yearlySd = 20,
  rate2_yearlyMean = 0.05,
  rate2_yearlySd = 0.01
)

numberOfYears = 20
yearLengthInDays = 365

annualPrecipitationPars <- list(
  annualSum = c(),
  plateauValue = c(),
  inflection1 = c(),
  rate1 = c(),
  inflection2 = c(),
  rate2 = c(),
  nSamples = c(),
  maxSampleSize = c()
)

precipitationPerYear <- vector("list", numberOfYears)

for (year in 1:numberOfYears)
{
  # assign parameter values for a given year
  
  annualPrecipitationPars$annualSum <- c(
    annualPrecipitationPars$annualSum,
    max(0, 
        rnorm(1, 
              originalHyperparams$yearlyMean, 
              originalHyperparams$yearlySd)
    )
  )
  
  annualPrecipitationPars$plateauValue <- c(
    annualPrecipitationPars$plateauValue,
    min(1, 
        max(0, 
            rnorm(1, 
                  originalHyperparams$plateauValue_yearlyMean, 
                  originalHyperparams$plateauValue_yearlySd)
        )
    )
  )
  
  annualPrecipitationPars$inflection1 <- c(
    annualPrecipitationPars$inflection1,
    min(yearLengthInDays, 
        max(1, 
            rnorm(1, 
                  originalHyperparams$inflection1_yearlyMean, 
                  originalHyperparams$inflection1_yearlySd)
        )
    )
  )
  
  annualPrecipitationPars$rate1 <- c(
    annualPrecipitationPars$rate1,
    max(0, 
        rnorm(1, 
              originalHyperparams$rate1_yearlyMean, 
              originalHyperparams$rate1_yearlySd)
    )
  )
  
  annualPrecipitationPars$inflection2 <- c(
    annualPrecipitationPars$inflection2,
    min(yearLengthInDays, 
        max(1, 
            rnorm(1, 
                  originalHyperparams$inflection2_yearlyMean, 
                  originalHyperparams$inflection2_yearlySd)
        )
    )
  )
  
  annualPrecipitationPars$rate2 <- c(
    annualPrecipitationPars$rate2,
    max(0, 
        rnorm(1, 
              originalHyperparams$rate2_yearlyMean, 
              originalHyperparams$rate2_yearlySd)
    )
  )
  
  annualPrecipitationPars$nSamples <- c(
    annualPrecipitationPars$nSamples,
    max(0, 
        rnorm(1, 
              originalHyperparams$nSamples_yearlyMean, 
              originalHyperparams$nSamples_yearlySd)
    )
  )
  
  annualPrecipitationPars$maxSampleSize <- c(
    annualPrecipitationPars$maxSampleSize,
    max(0, 
        rnorm(1, 
              originalHyperparams$maxSampleSize_yearlyMean, 
              originalHyperparams$maxSampleSize_yearlySd)
    )
  )
  
  # create cumulative curve
  
  precipitationOfYear <- c()

  precipitationOfYear <- getAnnualDoubleLogisticCurve(
    plateauValue = annualPrecipitationPars$plateauValue,
    inflection1 = annualPrecipitationPars$inflection1,
    rate1 = annualPrecipitationPars$rate1,
    inflection2 = annualPrecipitationPars$inflection2,
    rate2 = annualPrecipitationPars$rate2,
    yearLengthInDays = yearLengthInDays
  )
  # 
  # precipitationOfYear <- escalonateCurve(
  #   curve = precipitationOfYear,
  #   nSamples = annualPrecipitationPars$nSamples, 
  #   maxSampleSize = annualPrecipitationPars$maxSampleSize,
  #   seed = seed)
  # 
  # precipitationOfYear <- rescaleCurve(precipitationOfYear)
  # 
  # precipitationPerYear[[year]] <- precipitationOfYear
}
```

### Estimation of hyperparameters based on weather dataset

Calculate yearly summary statistics matching parameter inputs for each example location:

```{r}
annualWeatherSummaryNames <- c("Site",
                               "temperature_annualMaxAt2m",
                               "temperature_annualMinAt2m",
                               "temperature_meanDailyFluctuation",
                               "temperature_dailyLowerDeviation",
                               "temperature_dailyUpperDeviation",
                               "solar_annualMax",
                               "solar_annualMin",
                               "solar_meanDailyFluctuation",
                               "precip_yearlyMean", 
                               "precip_yearlySd",
                               "precip_plateauValue_yearlyMean", 
                               "precip_plateauValue_yearlySd",
                               "precip_inflection1_yearlyMean", 
                               "precip_inflection1_yearlySd",
                               "precip_rate1_yearlyMean", 
                               "precip_rate1_yearlySd",
                               "precip_inflection2_yearlyMean", 
                               "precip_inflection2_yearlySd",
                               "precip_rate2_yearlyMean", 
                               "precip_rate2_yearlySd")
annualWeatherSummary <- vector("list", length(annualWeatherSummaryNames))
names(annualWeatherSummary) <- annualWeatherSummaryNames
# OBS: the lines above produce an ERROR related to names that is inconsequential

for (site in levels(factor(weather$Site)))
{
  annualWeatherSummary$Site <- c(annualWeatherSummary$Site, site)
  
  tempData <- weather[weather$Site == site,]
  
  # 1. temperature
  # get mean annual maximum and minimum
  annualWeatherSummary$temperature_annualMaxAt2m <- c(
    annualWeatherSummary$temperature_annualMaxAt2m, 
    max(aggregate(
      tempData$T2M,
      by = list(tempData$DOY),
      FUN = mean)[,2]
    )
  )
  annualWeatherSummary$temperature_annualMinAt2m <- c(
    annualWeatherSummary$temperature_annualMinAt2m, 
    min(aggregate(
      tempData$T2M, 
      by = list(tempData$DOY), 
      FUN = mean)[,2]
    )
  )
  # get mean daily standard deviation as "fluctuation"
  annualWeatherSummary$temperature_meanDailyFluctuation <- c(
    annualWeatherSummary$temperature_meanDailyFluctuation, 
    mean(aggregate(
      tempData$T2M, 
      by = list(tempData$DOY), 
      FUN = sd)[,2]
    )
  )
  # get mean differences between daily mean and daily maximum and minimum
  annualWeatherSummary$temperature_dailyLowerDeviation <- c(
    annualWeatherSummary$temperature_dailyLowerDeviation, 
    mean(tempData$T2M - tempData$T2M_MIN))
  annualWeatherSummary$temperature_dailyUpperDeviation <- c(
    annualWeatherSummary$temperature_dailyUpperDeviation, 
    mean(tempData$T2M_MAX - tempData$T2M)
  )
  
  # 2. solar radiation
  # get mean annual maximum and minimum
  annualWeatherSummary$solar_annualMax <- c(
    annualWeatherSummary$solar_annualMax, 
    max(aggregate(
      tempData$ALLSKY_SFC_SW_DWN,
      by = list(tempData$DOY), 
      mean)[,2]
    )
  )
  annualWeatherSummary$solar_annualMin <- c(
    annualWeatherSummary$solar_annualMin, 
    min(aggregate(
      tempData$ALLSKY_SFC_SW_DWN, 
      by = list(tempData$DOY), 
      mean)[,2]
    )
  )
  # get mean daily standard deviation as "fluctuation"
  annualWeatherSummary$solar_meanDailyFluctuation <- c(
    annualWeatherSummary$solar_meanDailyFluctuation, 
    mean(aggregate(
      tempData$ALLSKY_SFC_SW_DWN, 
      by = list(tempData$DOY), 
      FUN = sd)[,2]
    )
  )
  
  # 3. precipitation
  # get yearly mean and standard deviation of ...
  # 3.1. annual sum
  annualWeatherSummary$precip_yearlyMean <- c(
    annualWeatherSummary$precip_yearlyMean,
    mean(aggregate(
      tempData$PRECTOT,
      by = list(tempData$YEAR),
      FUN = sum)[,2]
    )
  )
  annualWeatherSummary$precip_yearlySd <- c(
    annualWeatherSummary$precip_yearlySd,
    sd(aggregate(
      tempData$PRECTOT,
      by = list(tempData$YEAR),
      FUN = sum)[,2]
    )
  )
  # Cumulative curve parameters
  # 3.2. plateau value
  annualWeatherSummary$precip_plateauValue_yearlyMean <- c(
    annualWeatherSummary$precip_plateauValue_yearlyMean,
    mean(aggregate(
      tempData$PRECTOT,
      by = list(tempData$YEAR),
      FUN = estimatePlateauValue)[,2]
    )
  )
  annualWeatherSummary$precip_plateauValue_yearlySd <- c(
    annualWeatherSummary$precip_plateauValue_yearlySd,
    sd(aggregate(
      tempData$PRECTOT,
      by = list(tempData$YEAR),
      FUN = estimatePlateauValue)[,2]
    )
  )
  # 3.3. first inflection
  annualWeatherSummary$precip_inflection1_yearlyMean <- c(
    annualWeatherSummary$precip_inflection1_yearlyMean,
    mean(
      getVectorOfValuesInsideListOfLists(
        lapply(split(
          tempData$PRECTOT,
          list(tempData$YEAR)),
          getInflectionPointsAndRates),
        indexOfElements = "inflection1"
      )
    )
  )
  annualWeatherSummary$precip_inflection1_yearlySd <- c(
    annualWeatherSummary$precip_inflection1_yearlySd,
    sd(
      getVectorOfValuesInsideListOfLists(
        lapply(split(
          tempData$PRECTOT,
          list(tempData$YEAR)),
          getInflectionPointsAndRates),
        indexOfElements = "inflection1"
      )
    )
  )
  # 3.4. first rate
  annualWeatherSummary$precip_rate1_yearlyMean <- c(
    annualWeatherSummary$precip_rate1_yearlyMean,
    mean(
      getVectorOfValuesInsideListOfLists(
        lapply(split(
          tempData$PRECTOT,
          list(tempData$YEAR)),
          getInflectionPointsAndRates),
        indexOfElements = "rate1"
      )
    )
  )
  annualWeatherSummary$precip_rate1_yearlySd <- c(
    annualWeatherSummary$precip_rate1_yearlySd,
    sd(
      getVectorOfValuesInsideListOfLists(
        lapply(split(
          tempData$PRECTOT,
          list(tempData$YEAR)),
          getInflectionPointsAndRates),
        indexOfElements = "rate1"
      )
    )
  )
  # 3.5. second inflection
  annualWeatherSummary$precip_inflection2_yearlyMean <- c(
    annualWeatherSummary$precip_inflection2_yearlyMean,
    mean(
      getVectorOfValuesInsideListOfLists(
        lapply(split(
          tempData$PRECTOT,
          list(tempData$YEAR)),
          getInflectionPointsAndRates),
        indexOfElements = "inflection2"
      )
    )
  )
  annualWeatherSummary$precip_inflection2_yearlySd <- c(
    annualWeatherSummary$precip_inflection2_yearlySd,
    sd(
      getVectorOfValuesInsideListOfLists(
        lapply(split(
          tempData$PRECTOT,
          list(tempData$YEAR)),
          getInflectionPointsAndRates),
        indexOfElements = "inflection2"
      )
    )
  )
  # 3.6. second rate
  annualWeatherSummary$precip_rate2_yearlyMean <- c(
    annualWeatherSummary$precip_rate2_yearlyMean,
    mean(
      getVectorOfValuesInsideListOfLists(
        lapply(split(
          tempData$PRECTOT,
          list(tempData$YEAR)),
          getInflectionPointsAndRates),
        indexOfElements = "rate2"
      )
    )
  )
  annualWeatherSummary$precip_rate2_yearlySd <- c(
    annualWeatherSummary$precip_rate2_yearlySd,
    sd(
      getVectorOfValuesInsideListOfLists(
        lapply(split(
          tempData$PRECTOT,
          list(tempData$YEAR)),
          getInflectionPointsAndRates),
        indexOfElements = "rate2"
      )
    )
  )
 }

annualWeatherSummary <- data.frame(annualWeatherSummary)
```

Initialise experiments using annual summary statistics of example locations as parameter inputs:

```{r}
weatherModelRuns <- list()

for (site in levels(factor(weather$Site)))
{
  tempData <- annualWeatherSummary[annualWeatherSummary$Site == site,]
  
  weatherModelRuns[[site]] <- weatherModel.init(
    yearLengthInDays = yearLengthInDays_sim,
    seed = 0,
    albedo = 0.4,
    southHemisphere = weather[weather$Site == site,"LAT"][1] < 0,
    temperature_annualMaxAt2m = tempData$temperature_annualMaxAt2m,
    temperature_annualMinAt2m = tempData$temperature_annualMinAt2m,
    temperature_meanDailyFluctuation = tempData$temperature_meanDailyFluctuation,
    temperature_dailyLowerDeviation = tempData$temperature_dailyLowerDeviation,
    temperature_dailyUpperDeviation = tempData$temperature_dailyUpperDeviation,
    solar_annualMax = tempData$solar_annualMax,
    solar_annualMin = tempData$solar_annualMin,
    solar_meanDailyFluctuation = tempData$solar_meanDailyFluctuation,
    precip_yearlyMean = tempData$precip_yearlyMean,
    precip_yearlySd = tempData$precip_yearlySd,
    precip_nSamples_yearlyMean = tempData$precip_nSamples_yearlyMean,
    precip_nSamples_yearlySd = tempData$precip_nSamples_yearlySd,
    precip_maxSampleSize_yearlyMean = tempData$precip_maxSampleSize_yearlyMean,
    precip_maxSampleSize_yearlySd = tempData$precip_maxSampleSize_yearlySd,
    precip_plateauValue_yearlyMean = tempData$precip_plateauValue_yearlyMean,
    precip_plateauValue_yearlySd = tempData$precip_plateauValue_yearlySd,
    precip_inflection1_yearlyMean = tempData$precip_inflection1_yearlyMean,
    precip_inflection1_yearlySd = tempData$precip_inflection1_yearlySd,
    precip_rate1_yearlyMean = tempData$precip_rate1_yearlyMean,
    precip_rate1_yearlySd = tempData$precip_rate1_yearlySd,
    precip_inflection2_yearlyMean = tempData$precip_inflection2_yearlyMean,
    precip_inflection2_yearlySd = tempData$precip_inflection2_yearlySd,
    precip_rate2_yearlyMean = tempData$precip_rate2_yearlyMean,
    precip_rate2_yearlySd = tempData$precip_rate2_yearlySd
  )
}
```

Run experiments:

```{r}
for (site in levels(factor(weather$Site)))
{
  weatherModelRuns[[site]] <-
    weatherModel.run(weatherModelRuns[[site]], 
                     nlevels(factor(weather$YEAR)))
}
```

Create a data frame containing the daily summary statistics of simulations comparable to the one for the real data (created for Fig 1 above):

```{r}
weatherSummary_sim <- vector("list", length(weatherSummaryNames) - 1)
names(weatherSummary_sim) <- weatherSummaryNames[weatherSummaryNames != "solarRadiationTop.mean"]
# OBS: the lines above produce an ERROR related to names that is inconsequential

for (site in levels(factor(weather$Site)))
{
  tempData_thisSite <- data.frame(weatherModelRuns[[site]]$daily)
  
  for (day in 1:365)
  {
    weatherSummary_sim$Site <- c(weatherSummary_sim$Site, site)
    weatherSummary_sim$dayOfYear <- c(weatherSummary_sim$dayOfYear, day)
    
    tempData_thisSiteAndDay <- tempData_thisSite[tempData_thisSite$currentDayOfYear == day,]
    
    # solar radiation
    weatherSummary_sim$solarRadiation.mean <- c(
      weatherSummary_sim$solarRadiation.mean, 
      mean(tempData_thisSiteAndDay$solarRadiation, na.rm = TRUE))
    weatherSummary_sim$solarRadiation.sd <- c(
      weatherSummary_sim$solarRadiation.sd, 
      sd(tempData_thisSiteAndDay$solarRadiation, na.rm = TRUE))
    weatherSummary_sim$solarRadiation.max <- c(
      weatherSummary_sim$solarRadiation.max, 
      max(tempData_thisSiteAndDay$solarRadiation, na.rm = TRUE))
    weatherSummary_sim$solarRadiation.min <- c(
      weatherSummary_sim$solarRadiation.min, 
      min(tempData_thisSiteAndDay$solarRadiation, na.rm = TRUE))
    weatherSummary_sim$solarRadiation.error <- c(
      weatherSummary_sim$solarRadiation.error,
      qt(0.975, 
         length(tempData_thisSiteAndDay$solarRadiation) - 1) * 
        sd(tempData_thisSiteAndDay$solarRadiation, na.rm = TRUE) /
        sqrt(length(tempData_thisSiteAndDay$solarRadiation)))
    
    # temperature
    
    ## daily mean
    weatherSummary_sim$temperature.mean <- c(
      weatherSummary_sim$temperature.mean, 
      mean(tempData_thisSiteAndDay$temperature, na.rm = TRUE))
    weatherSummary_sim$temperature.sd <- c(
      weatherSummary_sim$temperature.sd, 
      sd(tempData_thisSiteAndDay$temperature, na.rm = TRUE))
    weatherSummary_sim$temperature.max <- c(
      weatherSummary_sim$temperature.max, 
      max(tempData_thisSiteAndDay$temperature, na.rm = TRUE))
    weatherSummary_sim$temperature.min <- c(
      weatherSummary_sim$temperature.min, 
      min(tempData_thisSiteAndDay$temperature, na.rm = TRUE))
    weatherSummary_sim$temperature.error <- c(
      weatherSummary_sim$temperature.error,
      qt(0.975, 
         length(tempData_thisSiteAndDay$temperature) - 1) * 
        sd(tempData_thisSiteAndDay$temperature, na.rm = TRUE) /
        sqrt(length(tempData_thisSiteAndDay$temperature)))
    
    ## daily max
    weatherSummary_sim$maxTemperature.mean <- c(
      weatherSummary_sim$maxTemperature.mean, 
      mean(tempData_thisSiteAndDay$temperature_max, na.rm = TRUE))
    weatherSummary_sim$maxTemperature.max <- c(
      weatherSummary_sim$maxTemperature.max, 
      max(tempData_thisSiteAndDay$temperature_max, na.rm = TRUE))
    weatherSummary_sim$maxTemperature.min <- c(
      weatherSummary_sim$maxTemperature.min, 
      min(tempData_thisSiteAndDay$temperature_max, na.rm = TRUE))
    weatherSummary_sim$maxTemperature.error <- c(
      weatherSummary_sim$maxTemperature.error,
      qt(0.975, 
         length(tempData_thisSiteAndDay$temperature_max) - 1) * 
        sd(tempData_thisSiteAndDay$temperature_max, na.rm = TRUE) /
        sqrt(length(tempData_thisSiteAndDay$temperature_max)))
    
    ## daily min
    weatherSummary_sim$minTemperature.mean <- c(
      weatherSummary_sim$minTemperature.mean, 
      mean(tempData_thisSiteAndDay$temperature_min, na.rm = TRUE))
    weatherSummary_sim$minTemperature.max <- c(
      weatherSummary_sim$minTemperature.max, 
      max(tempData_thisSiteAndDay$temperature_min, na.rm = TRUE))
    weatherSummary_sim$minTemperature.min <- c(
      weatherSummary_sim$minTemperature.min, 
      min(tempData_thisSiteAndDay$temperature_min, na.rm = TRUE))
    weatherSummary_sim$minTemperature.error <- c(
      weatherSummary_sim$minTemperature.error,
      qt(0.975, 
         length(tempData_thisSiteAndDay$temperature_min) - 1) * 
        sd(tempData_thisSiteAndDay$temperature_min, na.rm = TRUE) /
        sqrt(length(tempData_thisSiteAndDay$temperature_min)))
    
    ## daily upper and lower deviation
    weatherSummary_sim$temperature.lowerDeviation <- c(
      weatherSummary_sim$temperature.lowerDeviation, 
      mean(tempData_thisSiteAndDay$temperature - 
             tempData_thisSiteAndDay$temperature_min))
    weatherSummary_sim$temperature.lowerDeviation.error <- c(
      weatherSummary_sim$temperature.lowerDeviation.error,
      qt(0.975, 
         length(tempData_thisSiteAndDay$temperature_min) - 1) * 
        sd(tempData_thisSiteAndDay$temperature - 
             tempData_thisSiteAndDay$temperature_min, 
           na.rm = TRUE) /
        sqrt(length(tempData_thisSiteAndDay$temperature_min)))
    weatherSummary_sim$temperature.upperDeviation <- c(
      weatherSummary_sim$temperature.upperDeviation, 
      mean(tempData_thisSiteAndDay$temperature_max - 
             tempData_thisSiteAndDay$temperature))
    weatherSummary_sim$temperature.upperDeviation.error <- c(
      weatherSummary_sim$temperature.upperDeviation.error,
      qt(0.975, 
         length(tempData_thisSiteAndDay$temperature_max) - 1) * 
        sd(tempData_thisSiteAndDay$temperature_max - 
             tempData_thisSiteAndDay$temperature, 
           na.rm = TRUE) /
        sqrt(length(tempData_thisSiteAndDay$temperature_max)))
    
    # precipitation
    weatherSummary_sim$precipitation.mean <- c(
      weatherSummary_sim$precipitation.mean, 
      mean(tempData_thisSiteAndDay$precipitation, na.rm = TRUE))
    weatherSummary_sim$precipitation.max <- c(
      weatherSummary_sim$precipitation.max, 
      max(tempData_thisSiteAndDay$precipitation, na.rm = TRUE))
    weatherSummary_sim$precipitation.min <- c(
      weatherSummary_sim$precipitation.min, 
      min(tempData_thisSiteAndDay$precipitation, na.rm = TRUE))
    weatherSummary_sim$precipitation.error <- c(
      weatherSummary_sim$precipitation.error,
      qt(0.975, 
         length(tempData_thisSiteAndDay$precipitation) - 1) * 
        sd(tempData_thisSiteAndDay$precipitation, na.rm = TRUE) /
        sqrt(length(tempData_thisSiteAndDay$precipitation)))
  }
}

weatherSummary_sim <- data.frame(weatherSummary_sim)
```

Set colours for real and simulated data:

```{r}
realDataColour = hsv(200/360, 62/100, 63/100)

simulatedDataColour = hsv(24/360, 79/100, 89/100)
```

Create figure:

```{r}
numberOfSites = nlevels(weatherSummary_sim$Site)
lengthOfYear_real = 366
lengthOfYear_sim = 365

#---------
plotName = "output/FigX-ValidationUsingExamples.png"

grScale = 2
fontRescale = 0
axisTextRescale = 0
marginTextRescale = 0

png(plotName,
    width = numberOfSites * grScale * 150, height = grScale * 800)
#---------
# alternatively, to create eps file:
#---------
# plotName = "FigX-ValidationUsingExamples.eps"
# 
# grScale = 1.2
# fontRescale = 0.1
# axisTextRescale = -0.1
# marginTextRescale = -0.5
# 
# extrafont::loadfonts(device = "postscript")
# grDevices::cairo_ps(filename = plotName,
#                     pointsize = 12,
#                     width = numberOfSites * grScale * 1.5,
#                     height = grScale * 8,
#                     onefile = FALSE,
#                     family = "sans"
#                     )
#---------

nColumns = numberOfSites + 1
nRowsExceptBottom = 4

layout(rbind(matrix(1:(nColumns * nRowsExceptBottom), 
                    nrow = nRowsExceptBottom,
                    ncol = nColumns, 
                    byrow = FALSE),
             c((nColumns * nRowsExceptBottom) + 1,
               rep((nColumns * nRowsExceptBottom) + 2, 
                   numberOfSites))),
       widths = c(3, 12, rep(10, numberOfSites - 2), 14),
       heights = c(3, 10, 10, 12, 2)
       )

yLabs <- c(expression(paste("solar radiation (", MJ/m^-2, ")")),
           "temperature (C)", "precipitation (mm)")

roundToMultiple <- function(i, baseOfMultiple, roundFunction = round)
{
  return(match.fun(roundFunction)(i/baseOfMultiple) * baseOfMultiple)
}

rangeSolar = c(
  roundToMultiple(min(
    min(weatherSummary$solarRadiation.min),
    min(weatherSummary_sim$solarRadiation.min)),
                  5, floor),
  roundToMultiple(max(max(weatherSummary$solarRadiation.max),
                    max(weatherSummary_sim$solarRadiation.max)), 
                    5, ceiling)
)

rangeTemp = c(
  roundToMultiple(min(
    min(weatherSummary$minTemperature.min),
    min(weatherSummary_sim$minTemperature.min)),
    5, floor),
  roundToMultiple(max(
    max(weatherSummary$maxTemperature.max),
    max(weatherSummary_sim$maxTemperature.max)), 
    5, ceiling))

rangePrecip = c(
  roundToMultiple(min(
    min(weatherSummary$precipitation.min),
    min(weatherSummary_sim$precipitation.min)), 
    5, ceiling),
  roundToMultiple(max(
    max(weatherSummary$precipitation.max),
    max(weatherSummary_sim$precipitation.max)), 
    5, ceiling))

par(cex = grScale,
    cex.axis = grScale * (0.8 + axisTextRescale))

# First column: y axis titles

par(mar = c(0, 0, 0, 1))
  
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')

plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, font = 4, 
     cex = grScale * (0.7 + fontRescale), 
     srt = 90,
     labels = yLabs[1])

plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, font = 4, 
     cex = grScale * (0.8 + fontRescale), 
     srt = 90,
     labels = yLabs[2])

plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.6, font = 4, 
     cex = grScale * (0.8 + fontRescale), 
     srt = 90,
     labels = yLabs[3])

# Second to N columns
  
for (site in levels(factor(weatherSummary$Site)))
{
  tempData <- weatherSummary[weatherSummary$Site == site,]
  
  tempData_sim <- weatherSummary_sim[weatherSummary_sim$Site == site,]
  
  leftPlotMargin = ifelse(site == levels(weatherSummary$Site)[1],
                          2, 0.1)
  rightPlotMargin = ifelse(site == levels(weatherSummary$Site)[nlevels(weatherSummary$Site)],
                           4, 0.1)
  
  # 1. Site name + latitude
  
  par(mar = c(0.2, leftPlotMargin, 0.1, rightPlotMargin))
  
  plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
  text(x = 0.5, y = 0.5, font = 4, 
       cex = grScale * (0.8 + fontRescale),
      labels = paste(site, 
                     sitesLatitude$Latitude[sitesLatitude$Site == site], sep = "\n"))
  
  # 2. solar radiation
  
  par(mar = c(0.1, leftPlotMargin, 0.1, rightPlotMargin))

  plot(1:lengthOfYear_real, tempData$solarRadiation.mean, 
       axes = FALSE,
       ylim = rangeSolar,
       type = "l", lwd = grScale,
       col = realDataColour)
  
  ## 95% confidence interval
  polygon(x = c(1:yearLengthInDays_real, 
                rev(1:yearLengthInDays_real)),
          y = c((tempData$solarRadiation.mean + tempData$solarRadiation.error),
              rev(tempData$solarRadiation.mean)),
          col = adjustcolor(realDataColour, alpha.f = 0.5),
          border = NA)
  polygon(x = c(1:yearLengthInDays_real, 
                rev(1:yearLengthInDays_real)),
          y = c((tempData$solarRadiation.mean - tempData$solarRadiation.error),
                rev(tempData$solarRadiation.mean)),
          col = adjustcolor(realDataColour, alpha.f = 0.5),
          border = NA)
  
  ## min-max interval
  polygon(x = c(1:lengthOfYear_real, 
                rev(1:lengthOfYear_real)),
          y = c(tempData$solarRadiation.max,
              rev(tempData$solarRadiation.mean)),
          col = adjustcolor(realDataColour, alpha.f = 0.3),
          border=NA)
  polygon(x = c(1:lengthOfYear_real, 
                rev(1:lengthOfYear_real)),
          y = c(tempData$solarRadiation.min,
                rev(tempData$solarRadiation.mean)),
          col = adjustcolor(realDataColour, alpha.f = 0.3),
          border = NA)
  
  # simulations
  
  lines(1:lengthOfYear_sim, tempData_sim$solarRadiation.mean, 
        lwd = grScale,
        col = simulatedDataColour)
  
  ## 95% confidence interval
  polygon(x = c(1:lengthOfYear_sim, 
                rev(1:lengthOfYear_sim)),
          y = c((tempData_sim$solarRadiation.mean + tempData_sim$solarRadiation.error),
              rev(tempData_sim$solarRadiation.mean)),
          col = adjustcolor(simulatedDataColour, alpha.f = 0.5),
          border = NA)
  polygon(x = c(1:lengthOfYear_sim, 
                rev(1:lengthOfYear_sim)),
          y = c((tempData_sim$solarRadiation.mean - tempData_sim$solarRadiation.error),
                rev(tempData_sim$solarRadiation.mean)),
          col = adjustcolor(simulatedDataColour, alpha.f = 0.5),
          border = NA)
  
  ## min-max interval
  polygon(x = c(1:lengthOfYear_sim, 
                rev(1:lengthOfYear_sim)),
          y = c(tempData_sim$solarRadiation.max,
              rev(tempData_sim$solarRadiation.mean)),
          col = adjustcolor(simulatedDataColour, alpha.f = 0.3),
          border=NA)
  polygon(x = c(1:lengthOfYear_sim, 
                rev(1:lengthOfYear_sim)),
          y = c(tempData_sim$solarRadiation.min,
                rev(tempData_sim$solarRadiation.mean)),
          col = adjustcolor(simulatedDataColour, alpha.f = 0.3),
          border = NA)
  
  # solstices
  abline(v = 31+28+31+30+31+21, # 21 June (approx.)
         lty = 3, lwd = grScale * 1.6)
  abline(v = 31+28+31+30+31+30+31+31+30+31+30+21, # 21 December (approx.)
         lty = 3, lwd = grScale)
  
  if (site == levels(weatherSummary$Site)[1])
  {
    axis(2, at = seq(rangeSolar[1], rangeSolar[2], 5))
  }
  
  # 3. temperature (daily mean, max, min)
  
  ## daily mean
  plot(1:lengthOfYear_real, 
       tempData$temperature.mean, 
       axes = FALSE,
       ylim = rangeTemp,
       type = "l", lwd = grScale,
       col = realDataColour)
  
  ## 95% confidence interval
  polygon(x = c(1:yearLengthInDays_real, 
                rev(1:yearLengthInDays_real)),
          y = c((tempData$temperature.mean + tempData$temperature.error),
              rev(tempData$temperature.mean)),
          col = adjustcolor(realDataColour, alpha.f = 0.5),
          border = NA)
  polygon(x = c(1:yearLengthInDays_real, 
                rev(1:yearLengthInDays_real)),
          y = c((tempData$temperature.mean - tempData$temperature.error),
                rev(tempData$temperature.mean)),
          col = adjustcolor(realDataColour, alpha.f = 0.5),
          border = NA)
  
  ## min-max interval
  polygon(x = c(1:lengthOfYear_real, 
                rev(1:lengthOfYear_real)),
          y = c(tempData$temperature.max,
              rev(tempData$temperature.mean)),
          col = adjustcolor(realDataColour, alpha.f = 0.3),
          border = NA)
  polygon(x = c(1:lengthOfYear_real, 
                rev(1:lengthOfYear_real)),
          y = c(tempData$temperature.min,
                rev(tempData$temperature.mean)),
          col = adjustcolor(realDataColour, alpha.f = 0.3),
          border = NA)
  
  # daily max
  lines(1:lengthOfYear_real, 
        tempData$maxTemperature.mean, 
        lwd = grScale, 
        col = adjustcolor(realDataColour, alpha.f = 0.5))
  
  ## 95% confidence interval
  polygon(x = c(1:yearLengthInDays_real, 
                rev(1:yearLengthInDays_real)),
          y = c((tempData$maxTemperature.mean + tempData$maxTemperature.error),
              rev(tempData$maxTemperature.mean)),
          col = adjustcolor(realDataColour, alpha.f = 0.5),
          border = NA)
  polygon(x = c(1:yearLengthInDays_real, 
                rev(1:yearLengthInDays_real)),
          y = c((tempData$maxTemperature.mean - tempData$maxTemperature.error),
                rev(tempData$maxTemperature.mean)),
          col = adjustcolor(realDataColour, alpha.f = 0.5),
          border = NA)
  
  ## min-max interval
  polygon(x = c(1:lengthOfYear_real, 
                rev(1:lengthOfYear_real)),
          y = c(tempData$maxTemperature.max,
              rev(tempData$maxTemperature.mean)),
          col = adjustcolor(realDataColour, alpha.f = 0.3),
          border = NA)
  polygon(x = c(1:lengthOfYear_real, 
                rev(1:lengthOfYear_real)),
          y = c(tempData$maxTemperature.min,
                rev(tempData$maxTemperature.mean)),
          col = adjustcolor(realDataColour, alpha.f = 0.3),
          border = NA)
  
  ## daily min
  lines(1:lengthOfYear_real, 
        tempData$minTemperature.mean, 
        lwd = grScale, 
        col = adjustcolor(realDataColour, alpha.f = 0.5))
  
  ## 95% confidence interval
  polygon(x = c(1:yearLengthInDays_real, 
                rev(1:yearLengthInDays_real)),
          y = c((tempData$minTemperature.mean + tempData$minTemperature.error),
              rev(tempData$minTemperature.mean)),
          col = adjustcolor(realDataColour, alpha.f = 0.5),
          border = NA)
  polygon(x = c(1:yearLengthInDays_real, 
                rev(1:yearLengthInDays_real)),
          y = c((tempData$minTemperature.mean - tempData$minTemperature.error),
                rev(tempData$minTemperature.mean)),
          col = adjustcolor(realDataColour, alpha.f = 0.5),
          border = NA)
  
  ## min-max interval
  polygon(x = c(1:lengthOfYear_real, 
                rev(1:lengthOfYear_real)),
          y = c(tempData$minTemperature.max,
              rev(tempData$minTemperature.mean)),
          col = adjustcolor(realDataColour, alpha.f = 0.3),
          border = NA)
  polygon(x = c(1:lengthOfYear_real, 
                rev(1:lengthOfYear_real)),
          y = c(tempData$minTemperature.min,
                rev(tempData$minTemperature.mean)),
          col = adjustcolor(realDataColour, alpha.f = 0.3),
          border = NA)
  
  # simulations
  
  ## daily mean
  lines(1:lengthOfYear_sim, 
        tempData_sim$temperature.mean, 
        lwd = grScale,
        col = simulatedDataColour)
  
  ## 95% confidence interval
  polygon(x = c(1:lengthOfYear_sim, 
                rev(1:lengthOfYear_sim)),
          y = c((tempData_sim$temperature.mean + tempData_sim$temperature.error),
              rev(tempData_sim$temperature.mean)),
          col = adjustcolor(simulatedDataColour, alpha.f = 0.5),
          border = NA)
  polygon(x = c(1:lengthOfYear_sim, 
                rev(1:lengthOfYear_sim)),
          y = c((tempData_sim$temperature.mean - tempData_sim$temperature.error),
                rev(tempData_sim$temperature.mean)),
          col = adjustcolor(simulatedDataColour, alpha.f = 0.5),
          border = NA)
  
  ## min-max interval
  polygon(x = c(1:lengthOfYear_sim, 
                rev(1:lengthOfYear_sim)),
          y = c(tempData_sim$temperature.max,
              rev(tempData_sim$temperature.mean)),
          col = adjustcolor(simulatedDataColour, alpha.f = 0.3),
          border=NA)
  polygon(x = c(1:lengthOfYear_sim, 
                rev(1:lengthOfYear_sim)),
          y = c(tempData_sim$temperature.min,
                rev(tempData_sim$temperature.mean)),
          col = adjustcolor(simulatedDataColour, alpha.f = 0.3),
          border = NA)
  
  ## daily max
  lines(1:lengthOfYear_sim, tempData_sim$maxTemperature.mean, 
        lwd = grScale, 
        col = adjustcolor(simulatedDataColour, alpha.f = 0.5))
  
  ## 95% confidence interval
  polygon(x = c(1:lengthOfYear_sim, 
                rev(1:lengthOfYear_sim)),
          y = c((tempData_sim$maxTemperature.mean + tempData_sim$maxTemperature.error),
              rev(tempData_sim$maxTemperature.mean)),
          col = adjustcolor(simulatedDataColour, alpha.f = 0.5),
          border = NA)
  polygon(x = c(1:lengthOfYear_sim, 
                rev(1:lengthOfYear_sim)),
          y = c((tempData_sim$maxTemperature.mean - tempData_sim$maxTemperature.error),
                rev(tempData_sim$maxTemperature.mean)),
          col = adjustcolor(simulatedDataColour, alpha.f = 0.5),
          border = NA)
  
  ## min-max interval
  polygon(x = c(1:lengthOfYear_sim, 
                rev(1:lengthOfYear_sim)),
          y = c(tempData_sim$maxTemperature.max,
              rev(tempData_sim$maxTemperature.mean)),
          col = adjustcolor(simulatedDataColour, alpha.f = 0.3),
          border = NA)
  polygon(x = c(1:lengthOfYear_sim, 
                rev(1:lengthOfYear_sim)),
          y = c(tempData_sim$maxTemperature.min,
                rev(tempData_sim$maxTemperature.mean)),
          col = adjustcolor(simulatedDataColour, alpha.f = 0.3),
          border = NA)
  
  ## daily min
  lines(1:lengthOfYear_sim, 
        tempData_sim$minTemperature.mean, 
        lwd = grScale, 
        col = adjustcolor(simulatedDataColour, alpha.f = 0.5))
  
  ## 95% confidence interval
  polygon(x = c(1:lengthOfYear_sim, 
                rev(1:lengthOfYear_sim)),
          y = c((tempData_sim$minTemperature.mean + tempData_sim$minTemperature.error),
              rev(tempData_sim$minTemperature.mean)),
          col = adjustcolor(simulatedDataColour, alpha.f = 0.5),
          border = NA)
  polygon(x = c(1:lengthOfYear_sim, 
                rev(1:lengthOfYear_sim)),
          y = c((tempData_sim$minTemperature.mean - tempData_sim$minTemperature.error),
                rev(tempData_sim$minTemperature.mean)),
          col = adjustcolor(simulatedDataColour, alpha.f = 0.5),
          border = NA)
  
  ## min-max interval
  polygon(x = c(1:lengthOfYear_sim, 
                rev(1:lengthOfYear_sim)),
          y = c(tempData_sim$minTemperature.max,
              rev(tempData_sim$minTemperature.mean)),
          col = adjustcolor(simulatedDataColour, alpha.f = 0.3),
          border = NA)
  polygon(x = c(1:lengthOfYear_sim, 
                rev(1:lengthOfYear_sim)),
          y = c(tempData_sim$minTemperature.min,
                rev(tempData_sim$minTemperature.mean)),
          col = adjustcolor(simulatedDataColour, alpha.f = 0.3),
          border = NA)
  
  # solstices
  abline(v = 31+28+31+30+31+21, # 21 June (approx.)
         lty = 3, lwd = grScale)
  abline(v = 31+28+31+30+31+30+31+31+30+31+30+21, # 21 December (approx.)
         lty = 3, lwd = grScale)
  
  if (site == levels(weatherSummary$Site)[1])
  {
    axis(2, at = seq(rangeTemp[1], rangeTemp[2], 5))
  }
  
  # 4. precipitation
  
  # cumulative curve
  par(mar = c(8, leftPlotMargin, 0.1, rightPlotMargin))

  plot(c(1, lengthOfYear_real), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
  
  for (year in unique(weather$YEAR))
  {
    lines(1:nrow(
      weather[weather$Site == site & weather$YEAR == year,]), 
          getCumulativePrecipitationOfYear(
            weather[weather$Site == site & 
                      weather$YEAR == year, 
                    "PRECTOT"]), 
        lwd = grScale, 
        col = adjustcolor(realDataColour, alpha.f = 0.1))
  }
  
  for (year in unique(weatherModelRuns[[site]]$daily$currentYear))
  {
    lines(1:yearLengthInDays_sim, 
          getCumulativePrecipitationOfYear(
            weatherModelRuns[[site]]$daily$precipitation[
              weatherModelRuns[[site]]$daily$currentYear == year
            ]), 
        lwd = grScale, 
        col = adjustcolor(simulatedDataColour, alpha.f = 0.1))
  }
  
  if (site == levels(weatherSummary$Site)[nlevels(weatherSummary$Site)])
  {
    axis(4, at = seq(0, 1, 0.25))
    mtext("cumulative annual sum", 4, line = 2.5,
          cex = grScale * (1.5 + marginTextRescale))
  }
  
  # daily values
  par(new = T,
      mar = c(3, leftPlotMargin, 0.1, rightPlotMargin))
  
  plot(1:lengthOfYear_real, 
       tempData$precipitation.mean, 
       axes = FALSE,
       ylim = rangePrecip, #log = 'y',
       type = "l", lwd = grScale,
       col = realDataColour)
  polygon(x = c(1:lengthOfYear_real, 
                rev(1:lengthOfYear_real)),
          y = c(tempData$precipitation.max,
              rev(tempData$precipitation.mean)),
          col = adjustcolor(realDataColour, alpha.f = 0.3),
          border=NA)
  polygon(x = c(1:lengthOfYear_real, 
                rev(1:lengthOfYear_real)),
          y = c(tempData$precipitation.min,
                rev(tempData$precipitation.mean)),
          col = adjustcolor(realDataColour, alpha.f = 0.3),
          border = NA)
  
  # simulations
  
  lines(1:lengthOfYear_sim, 
        tempData_sim$precipitation.mean, 
        lwd = grScale,
        col = simulatedDataColour)
  
  ## 95% confidence interval
  polygon(x = c(1:lengthOfYear_sim, 
                rev(1:lengthOfYear_sim)),
          y = c((tempData_sim$precipitation.mean + tempData_sim$precipitation.error),
              rev(tempData_sim$precipitation.mean)),
          col = adjustcolor(simulatedDataColour, alpha.f = 0.5),
          border = NA)
  polygon(x = c(1:lengthOfYear_sim, 
                rev(1:lengthOfYear_sim)),
          y = c((tempData_sim$precipitation.mean - tempData_sim$precipitation.error),
                rev(tempData_sim$precipitation.mean)),
          col = adjustcolor(simulatedDataColour, alpha.f = 0.5),
          border = NA)
  
  ## min-max interval
  polygon(x = c(1:lengthOfYear_sim, 
                rev(1:lengthOfYear_sim)),
          y = c(tempData_sim$precipitation.max,
              rev(tempData_sim$precipitation.mean)),
          col = adjustcolor(simulatedDataColour, alpha.f = 0.3),
          border=NA)
  polygon(x = c(1:lengthOfYear_sim, 
                rev(1:lengthOfYear_sim)),
          y = c(tempData_sim$precipitation.min,
                rev(tempData_sim$precipitation.mean)),
          col = adjustcolor(simulatedDataColour, alpha.f = 0.3),
          border = NA)
  
  # solstices
  abline(v = 31+28+31+30+31+21, # 21 June (approx.)
         lty = 3, lwd = grScale)
  abline(v = 31+28+31+30+31+30+31+31+30+31+30+21, # 21 December (approx.)
         lty = 3, lwd = grScale)
  
  if (site == levels(weatherSummary$Site)[1])
  {
    axis(2, at = seq(rangePrecip[1], rangePrecip[2], 100))
  }
  
  axis(1, at = c(31, 
                 31+28, 
                 31+28+31, 
                 31+28+31+30, 
                 31+28+31+30+31, 
                 31+28+31+30+31+30,
                 31+28+31+30+31+30+31, 
                 31+28+31+30+31+30+31+31, 
                 31+28+31+30+31+30+31+31+30, 
                 31+28+31+30+31+30+31+31+30+31, 
                 31+28+31+30+31+30+31+31+30+31+30, 
                 31+28+31+30+31+30+31+31+30+31+30+31),
       las = 2
       )
}

# bottom row: empty and "day of year" or x axis title

par(mar = c(0, 0, 0, 0))

plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')

plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.7, font = 4, 
     cex = grScale * (0.8 + fontRescale),
     labels = "day of year")

# cleaning and closing

rm(tempData)

dev.off()
```

```{r, out.width = "\\textwidth"}
knitr::include_graphics(plotName)
```
