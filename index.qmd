# Introduction

This file and all other referenced in the code can be found at the repository: <https://github.com/Two-Rains/Weather-Angourakis-et-al-2025>

## About this document

To facilitate a deeper understanding and application of the Weather model, this resource contains all the source code for the figures presented in the related paper (Angourakis, Baudouin, and Petrie, **in submission**), including:

-   Visualizing weather variables in example locations.
-   Demonstrating the full model functionality.
-   Visualizing parameter sensitivity for solar radiation and temperature generation.
-   Visualizing parameter sensitivity for precipitation generation.
-   A walk-through on the calibration of parameters.
-   A calibration workflow for example locations.

These materials offer hands-on guidance for users looking to implement, calibrate, and analyse the Weather model in their own research.

## About the Weather model

The Weather model is a procedural generation model designed to produce random synthetic daily weather time series with realistic characteristics, given a set of parameters. It is implemented in NetLogo and R and is computationally efficient. The Weather model generates synthetic weather time series using algorithms based on sinusoidal and double logistic functions, incorporating stochastic variation to mimic unpredictable weather patterns. It produces daily values of surface solar radiation, average/max/min temperature, and total precipitation.

More details about the two implementation at:

-   [ODD document for the NetLogo implementation](netlogo/ODD-netlogo.md)

-   [ODD document for the R implementation](source/ODD-R.md)

### Parameters and hyperparameters

```{r, echo=FALSE}
source("source/weatherModel.R")
source("source/extract_params.R")

SEED <- 0
YEAR_LENGTH <- 365 # ignoring leap year adjustment
NUM_YEARS <- 5
NUM_DAYS <- NUM_YEARS * YEAR_LENGTH

weather_model <- initialise_weather_model(seed = SEED, year_length = YEAR_LENGTH)

# Extract initial parameters
initial_params <- list(
  names = c("year_length", "southern_hemisphere"),
  values = unlist(weather_model$PARAMS[c(2,4)]) # skip seed and albedo
)

# Extract remaining parameters
remaining_params <- lapply(names(weather_model$PARAMS)[5:length(weather_model$PARAMS)], 
                           function(name) extract_params(weather_model$PARAMS[[name]], name))

# Combine all parameters
all_params <- list(
  names = c(initial_params$names, unlist(lapply(remaining_params, `[[`, "names"))),
  values = c(initial_params$values, unlist(lapply(remaining_params, `[[`, "values")))
)
```

```{r, echo=FALSE}
solar_temp_params <- 1:10
# Create the table
sinosoid_params_names <- data.frame(
  parameter = all_params$names[solar_temp_params], 
  description = c(
    "Number of days per year",
    "Whether the annual curve corresponds to values in the southern or northern hemisphere",
    "Annual maximum of daily mean temperature",
    "Annual minimum of daily mean temperature",
    "Standard deviation in daily mean temperature",
    "Lower deviation from daily mean temperature",
    "Upper deviation from daily mean temperature",
    "Annual maximum of daily mean solar radiation",
    "Annual minimum of daily mean solar radiation",
    "Standard deviation in daily mean solar radiation"
  )
  )
knitr::kable(sinosoid_params_names, 
             format = "html",
             col.names = c("parameter", "description"),
             align = c("l", "l"))
```

```{r, echo=FALSE}
precip_params <- c(1, 11:26)
# Create the table
sinosoid_params_names <- data.frame(
  parameter = c(
    "",
    "annual_sum", "annual_sum",
    "n_samples", "n_samples",
    "max_sample_size", "max_sample_size",
    "plateau_value", "plateau_value",
    "inflection1", "inflection1",
    "rate1", "rate1",
    "inflection2", "inflection2",
    "rate2", "rate2"
  ),
  hyperparameter = all_params$names[precip_params],
  description = c(
    "Number of days per year",
    "Mean and",
    "standard deviation in annual sum of precipitation",
    "Mean and",
    "standard deviation in number of random samples (steps) during descritisation of cumulative precipitation curves (an approximation to the number of precipitation events)",
    "Mean and",
    "standard deviation in maximum length of samples (steps) during descritisation of cumulative precipitation curves (an approximation to the duration between precipitation events)",
    "Mean and",
    "standard deviation in value in which the gap between logistic curves is set (range of 0 to 1); interpretable as the proportion of precipitation falling in the first rainy season",
    "Mean and",
    "standard deviation in day of year in which the first logistic curves has its maximum slope; interpretable as the peak day of the first rainy season",
    "Mean and",
    "standard deviation in maximum rate or slope increase of the first logistic curves; interpretable as the maximum daily precipitation of the first rainy season",
    "Mean and",
    "standard deviation in day of year in which the second logistic curves has its maximum slope; interpretable as the peak day of the second rainy season",
    "Mean and",
    "standard deviation in maximum rate or slope increase of the second logistic curves; interpretable as the maximum daily precipitation of the second rainy season "
  )
  )
knitr::kable(sinosoid_params_names, 
             format = "html",
             col.names = c("hyperparameter", "parameter (year)", "description"),
             align = c("l", "l"))
```

## Context of the Weather model within the Indus Village model

![Route of model integration in the Indus Village](diagram/RoadMapSoFar_2024-07.png)

![The weather variables and the key interface variables of the related models](diagram/Weather-LandCrop-links_v2.png)

![The connections between weather variables and the key interface variables of the related models](diagram/Weather-LandCrop-links.png)
