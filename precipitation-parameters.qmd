# Demonstration of effects of parameter variation in the annual double logistic curve, annual cumulative precipitation curve and year daily precipitation.

Load source file containing the R implementation of the Weather model:

```{r}
source("source/weatherModel.R")
```

Set up six variations of parameter settings of the annual double logistic curve (i.e. plateauValue, inflection1, rate1, inflection2, rate2), the discretisation producing the annual cumulative precipitation curve (i.e. nSamples, maxSampleSize) and annualPrecipitation, assuming length of year of 365 days. Random generator seed used in discretisation is fixed:

```{r}
seed = 0

yearLengthInDays_sim = 365

parValuesDoubleLogistic <- rbind(
  # plateauValue, inflection1, rate1, inflection2, rate2
  c(0.01,         125,         0.3,   245,         0.22),
  c(0.15,         63,          0.55,  195,         0.6),
  c(0.5,          64,          0.05,  261,         0.12),
  c(0.45,         215,         0.01,  276,         0.39),
  c(0.6,          20,          0.38,  254,         0.04),
  c(0.85,         97,          0.24,  219,         0.17)
)

parValuesDiscretisation <- rbind(
  # nSamples, maxSampleSize
  c(152, 22),
  c(220, 10),
  c(240, 6),
  c(168, 13),
  c(191, 9),
  c(205, 17)
)

annualSumValues <- c(410, 1050, 636, 320, 1280, 745)

```

Create a colour palette for plotting:

```{r}
numColdColours = floor(nrow(parValuesDoubleLogistic) / 2)
numWarmColours = ceiling(nrow(parValuesDoubleLogistic) / 2)
colorPaletteValues <- cbind(
  # hue
  h = c(
    seq(198.6, 299.4, length.out = numColdColours),
    seq(5.15, 67.5, length.out = numWarmColours)
  ) / 360,
  # saturation
  s = c(
    seq(61.6, 75.3, length.out = numColdColours),
    seq(67, 77.8, length.out = numWarmColours)
  ) / 100,
  # value
  v = c(
    seq(95.2, 76.4, length.out = numColdColours),
    seq(73.7, 86.4, length.out = numWarmColours)
  ) / 100
)

# format the values a HSV readable for plotting
colorPalette <- c()

for (i in 1:nrow(parValuesDoubleLogistic))
{
  colorPalette <- c(colorPalette,
                    hsv(colorPaletteValues[i, "h"],
                        colorPaletteValues[i, "s"],
                        colorPaletteValues[i, "v"])
                    )
}
```

Initialise data frames for holding curves:

```{r}
doubleLogisticCurves <- data.frame(
  matrix(1:(yearLengthInDays_sim * nrow(parValuesDoubleLogistic)),
         nrow = yearLengthInDays_sim, 
         ncol = nrow(parValuesDoubleLogistic))
)

discretisedDoubleLogisticCurves <- data.frame(
  matrix(1:(yearLengthInDays_sim * nrow(parValuesDoubleLogistic)),
         nrow = yearLengthInDays_sim, 
         ncol = nrow(parValuesDoubleLogistic))
)

dailyPrecipitation <- data.frame(
  matrix(1:(yearLengthInDays_sim * nrow(parValuesDoubleLogistic)),
         nrow = yearLengthInDays_sim, 
         ncol = nrow(parValuesDoubleLogistic))
)
```

Plot curves:

```{r}
#---------
grScale = 2
fontRescale = 0

plotName = "output/FigX-annualDoubleLogisticCurve.png"

png(plotName, width = grScale * 1000, height = grScale * 1000)
#---------
# alternatively, to create eps file:
#---------
# plotName = "FigX-annualDoubleLogisticCurve.eps"
# 
# grScale = 1.2
# fontRescale = 0.1
# 
# extrafont::loadfonts(device = "postscript")
# grDevices::cairo_ps(filename = plotName,
#                       pointsize = 12,
#                       width = 10 * grScale,
#                       height = 10 * grScale,
#                       onefile = FALSE,
#                       family = "sans")
#---------

# this layout is assuming 6 cases
layout(matrix(c(14, 14, 14, 14, 14, 17, 17,
                1,   5,  5,  5,  5, 17, 17,
                15, 15, 15, 15, 15, 17, 17,
                2,   6,  6,  6,  6, 17, 17,
                16, 16, 16, 16, 16, 17, 17,
                3,   7,  8,  9, 10, 11, 12,
                4,  13, 13, 13, 13, 13, 13), 
              nrow = 7, ncol = 7, byrow = TRUE), 
       widths = c(2, rep(10, 6)),
       heights = c(4, 12, 4, 12, 4, 12, 1))

par(mgp = c(3, 0.4, 0),
    tcl = -0.4,
    cex = grScale * 1.2)

# 1st column: y-axes titles

# 1: y-axis title - double logistic curves

par(mar = c(0, 0, 0, 0))

plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, font = 4, 
     cex = grScale * (0.7 + fontRescale), 
     srt = 90,
     labels = "daily cumulative value")

# 2: y-axis title - discretised curves

plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, font = 4, 
     cex = grScale * (0.7 + fontRescale), 
     srt = 90,
     labels = "daily cumulative value")

# 3: y-axis title - year daily precipitation

plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, font = 4, 
     cex = grScale * (0.7 + fontRescale), 
     srt = 90,
     labels = "daily increment")

# 4: empty

plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')

# top plots

# 5: double logistic curves plot

par(mar = c(1, 1, 0.1, 1), 
    cex.axis = grScale * (0.5 + fontRescale))

plot(c(1, yearLengthInDays_sim),
     c(0, 1),
     type = "n", 
     xlab = "",
     ylab = ""
)

for (i in 1:nrow(parValuesDoubleLogistic))
{
  curve <- getAnnualDoubleLogisticCurve(
    plateauValue = parValuesDoubleLogistic[i, 1], 
    inflection1 = parValuesDoubleLogistic[i, 2], 
    rate1 = parValuesDoubleLogistic[i, 3], 
    inflection2 = parValuesDoubleLogistic[i, 4],
    rate2 = parValuesDoubleLogistic[i, 5],
    yearLengthInDays = yearLengthInDays_sim)
  
  lines((1:length(curve)), curve, 
        col = colorPalette[i], lwd = grScale * 3)
  
  points(c(parValuesDoubleLogistic[i, 2], 
           parValuesDoubleLogistic[i, 4]), 
         c(curve[parValuesDoubleLogistic[i, 2]], 
           curve[parValuesDoubleLogistic[i, 4]]),
         col = colorPalette[i], 
         pch = 19)
  
  doubleLogisticCurves[,i] <- curve
}

# 6: discretised double logistic or annual cumulative precipitation

plot(c(1, yearLengthInDays_sim),
     c(0, 1),
     type = "n", 
     xlab = "",
     ylab = ""
)

for (i in 1:nrow(parValuesDoubleLogistic))
{
  curve <- discretiseCurve(
    curve = doubleLogisticCurves[,i],
    nSamples = parValuesDiscretisation[i, 1],
    maxSampleSize = parValuesDiscretisation[i, 2],
    seed = seed)
  
  lines((1:length(curve)), curve, 
        col = adjustcolor(colorPalette[i], alpha.f = 0.5), 
        lwd = grScale * 3)
  
  points(c(parValuesDoubleLogistic[i, 2], 
           parValuesDoubleLogistic[i, 4]), 
         c(curve[parValuesDoubleLogistic[i, 2]], 
           curve[parValuesDoubleLogistic[i, 4]]),
         col = adjustcolor(colorPalette[i], alpha.f = 0.5), 
         pch = 19)
  
  curve <- rescaleCurve(curve)
  
  lines((1:length(curve)), curve, 
        col = colorPalette[i], lwd = grScale * 3)
  
  points(c(parValuesDoubleLogistic[i, 2], 
           parValuesDoubleLogistic[i, 4]), 
         c(curve[parValuesDoubleLogistic[i, 2]], 
           curve[parValuesDoubleLogistic[i, 4]]),
         col = colorPalette[i], 
         pch = 19)
  
  discretisedDoubleLogisticCurves[,i] <- curve
}

# 7-12: daily precipitation plots

par(mar = c(2, 1, 0.1, 1),
    cex.axis = grScale * (0.35 + fontRescale))

for (i in 1:nrow(parValuesDoubleLogistic))
{
  dailyPrecipitation[,i] <- getIncrementsFromCumulativeCurve(
    cumulativeCurve = discretisedDoubleLogisticCurves[,i]
  ) * annualSumValues[i]
}

# get overall maximum
maxDailyPrecipitation = max(dailyPrecipitation)

# plot in inverted order (plays nicer with legend)
for (i in nrow(parValuesDoubleLogistic):1)
{
  barplot(dailyPrecipitation[,i], 
          names.arg = c("1", rep(NA, 98), "100", rep(NA, 99), "200", rep(NA, 99), "300", rep(NA, 65)),
          ylab = "",
          ylim = c(0, maxDailyPrecipitation),
          xlab = "",
          col = colorPalette[i],
          border = colorPalette[i])
  
  points(c(parValuesDoubleLogistic[i, 2], 
           parValuesDoubleLogistic[i, 4]), 
         rep(maxDailyPrecipitation * 0.9, 2),
         col = colorPalette[i], 
         pch = 19)
  
  abline(v = parValuesDoubleLogistic[i, 2], col = colorPalette[i], lty = 2)
  abline(v = parValuesDoubleLogistic[i, 4], col = colorPalette[i], lty = 2)
  
  #axis(1, at = c(0, 100, 200, 365), tick = TRUE)
}

# 13: x-axis title

par(mar = c(0, 0, 0, 0))

plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.4, font = 4, cex = grScale * (0.7 + fontRescale),
     labels = "day of year")

# 14-16: infographic bits between plots

arrowPointsX = c(1/3, 2/3, 2/3, 1, 0.5, 0, 1/3, 1/3)
arrowPointsY = c(1, 1, 0.5, 0.5, 0, 0.5, 0.5, 1)
arrowPosX = c(0.9, 1)
textPos = c(0.88, 0.4)

par(mar = c(0, 0, 0, 0))

plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
polygon(x = arrowPosX[1] + (arrowPosX[2] - arrowPosX[1]) * arrowPointsX,
        y = arrowPointsY,
        col = rgb(0,0,0, alpha = 0.3),
        border = NA)
text(x = textPos[1], y = textPos[2], 
     font = 4, cex = grScale * (0.65 + fontRescale), adj = c(1, 0.5),
     labels = "getAnnualDoubleLogisticCurve(plateauValue, inflection1,\nrate1, inflection2, rate2)")

plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
polygon(x = arrowPosX[1] + (arrowPosX[2] - arrowPosX[1]) * arrowPointsX,
        y = arrowPointsY,
        col = rgb(0,0,0, alpha = 0.3),
        border = NA)
text(x = textPos[1], y = textPos[2], 
     font = 4, cex = grScale * (0.65 + fontRescale), adj = c(1, 0.5),
     labels = "discretiseCurve(curve, nSamples, maxSampleSize)\nrescaleCurve(curve)")

plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
polygon(x = arrowPosX[1] + (arrowPosX[2] - arrowPosX[1]) * arrowPointsX,
        y = arrowPointsY,
        col = rgb(0,0,0, alpha = 0.3),
        border = NA)
text(x = textPos[1], y = textPos[2], 
     font = 4, cex = grScale * (0.65 + fontRescale), adj = c(1, 0.5),
     labels = "getIncrementsFromCumulativeCurve(curve) x annualSum")

# 17: legend

par(mar = c(0, 0, 0, 0))

plot(c(0, 1), c(0, nrow(parValuesDoubleLogistic) + 1), 
     ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')

# set y positions for each line in the first case (bottom)
yPos <- c(0.5, seq(0.1, -0.3, length.out = 3))
xPos = 0.55
jump = 1

for (i in 1:nrow(parValuesDoubleLogistic))
{
  legend(x = 0, 
         y = (yPos[1] + jump * i), 
         legend = substitute(
           paste("plateauValue = ", plateauValue, ", ",
                 "inflection1 = ", inflection1, ", "), 
           list(plateauValue = parValuesDoubleLogistic[i, 1], 
                inflection1 = parValuesDoubleLogistic[i, 2])), 
         col = colorPalette[i],
         lwd = grScale * 6, cex = grScale * (0.5 + fontRescale),
         title = NULL, 
         bty = "n")
  text(x = xPos, 
       y = (yPos[2] + jump * i),
       labels = substitute(
         paste("rate1 = ", rate1, ", ",
               "inflection2 = ", inflection2, ", ",
               "rate2 = ", rate2, ","), 
         list(rate1 = parValuesDoubleLogistic[i, 3],
              inflection2 = parValuesDoubleLogistic[i, 4],
              rate2 = parValuesDoubleLogistic[i, 5])),
       cex = grScale * (0.5 + fontRescale))
  text(x = xPos, 
       y = (yPos[3] + jump * i),
       labels = substitute(
         paste("nSamples = ", nSamples, ", ",
               "maxSampleSize = ", maxSampleSize), 
         list(nSamples = parValuesDiscretisation[i, 1],
              maxSampleSize = parValuesDiscretisation[i, 2])),
       cex = grScale * (0.5 + fontRescale))
  text(x = xPos, 
       y = (yPos[4] + jump * i),
       labels = substitute(
         paste("annualSum = ", annualSum), 
         list(annualSum = annualSumValues[i])),
       cex = grScale * (0.5 + fontRescale))
}

dev.off()
```

```{r, out.width = "\\textwidth"}
knitr::include_graphics(plotName)
```
